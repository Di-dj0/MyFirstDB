-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.classes
(
    class_id integer NOT NULL,
    class_name character varying(40) COLLATE pg_catalog."default" NOT NULL,
    class_desc character varying(80) COLLATE pg_catalog."default",
    header_class integer[],
    CONSTRAINT pk_class_id PRIMARY KEY (class_id)
);

COMMENT ON TABLE public.classes
    IS 'Table responsable for grouping tasks in different steps of the project.';

CREATE TABLE IF NOT EXISTS public.expertise
(
    exp_id character(4) COLLATE pg_catalog."default" NOT NULL,
    exp_name character varying(40) COLLATE pg_catalog."default" NOT NULL,
    exp_desc character varying(80) COLLATE pg_catalog."default",
    CONSTRAINT pk_exp_id PRIMARY KEY (exp_id)
);

COMMENT ON TABLE public.expertise
    IS 'Table responsable for indicating witch expertise is working on the witch task.';

CREATE TABLE IF NOT EXISTS public.projects
(
    proj_id character(4) COLLATE pg_catalog."default" NOT NULL,
    proj_name character varying(40) COLLATE pg_catalog."default" NOT NULL,
    proj_desc character varying(80) COLLATE pg_catalog."default",
    proj_start_date date NOT NULL,
    proj_end_date date NOT NULL,
    CONSTRAINT pk_proj_id PRIMARY KEY (proj_id)
);

COMMENT ON TABLE public.projects
    IS 'Table responsable for holding projects information, doing and to-do.';

CREATE TABLE IF NOT EXISTS public.task_status
(
    status_id integer NOT NULL,
    status_desc character varying(40) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_stat_id PRIMARY KEY (status_id)
);

COMMENT ON TABLE public.task_status
    IS 'Table responsable for indicating what task status exists and what it represents.';

CREATE TABLE IF NOT EXISTS public.tasks
(
    task_id integer NOT NULL,
    task_name character varying(80) COLLATE pg_catalog."default" NOT NULL,
    proj_id character(4) COLLATE pg_catalog."default" NOT NULL,
    class_id integer NOT NULL,
    exp_id character(4) COLLATE pg_catalog."default",
    duration integer NOT NULL DEFAULT 1,
    predecessor_id integer[],
    status integer NOT NULL DEFAULT 1,
    CONSTRAINT pk_task_id PRIMARY KEY (task_id, proj_id)
);

COMMENT ON TABLE public.tasks
    IS 'Bigger table, used for storing any tasks necessary for any projects, unsing relations like "Witch project, witch team, with witch expertise, and status".';

ALTER TABLE IF EXISTS public.classes
    ADD CONSTRAINT fk_header_class_id FOREIGN KEY (class_id)
    REFERENCES public.classes (class_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS pk_class_id
    ON public.classes(class_id);


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_class_id FOREIGN KEY (class_id)
    REFERENCES public.classes (class_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_exp_id FOREIGN KEY (exp_id)
    REFERENCES public.expertise (exp_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_proj_id FOREIGN KEY (proj_id)
    REFERENCES public.projects (proj_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tasks
    ADD CONSTRAINT fk_task_stat_id FOREIGN KEY (status)
    REFERENCES public.task_status (status_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;